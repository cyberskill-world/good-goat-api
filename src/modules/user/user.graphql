type Type_User {
    id: String
    displayName: String
    password: String
    email: String
    phone: String
    googleId: Int
    facebookId: Int
    score: Int
    coin: Int
    diamond: Int
    settings: JSON
    avatar: String
    isDel: Boolean
    createdAt: DateTime
    updatedAt: DateTime
}

# Tạo kiểu đầu vào cho thao tác tạo mới
input Input_Create_User {
    displayName: String
    password: String
    email: String
    phone: String
    googleId: Int
    facebookId: Int
    score: Int
    coin: Int
    diamond: Int
    settings: JSON
    avatar: String
    isDel: Boolean
}

# Tạo kiểu đầu vào cho thao tác đọc
input Input_Get_User {
    id: ID!
}

input Input_Get_Users {
    limit: Int
    page: Int
    sort: JSON
    filter: JSON
}

# Tạo kiểu đầu vào cho thao tác cập nhật
input Input_Update_User {
    id: ID!
    displayName: String
    password: String
    email: String
    phone: String
    googleId: Int
    facebookId: Int
    score: Int
    coin: Int
    diamond: Int
    settings: JSON
    avatar: String
    isDel: Boolean
}

# Tạo kiểu đầu vào cho thao tác xóa
input Input_Delete_User {
    id: ID!
}

type Type_Users {
    docs: [Type_User]!
    totalDocs: Int!
    limit: Int!
    hasPrevPage: Boolean!
    hasNextPage: Boolean!
    page: Int
    totalPages: Int!
    offset: Int!
    prevPage: Int
    nextPage: Int
    pagingCounter: Int!
    meta: JSON
}

type Type_Response_User {
    success: Boolean!
    message: String
    result: Type_User
}

type Type_Response_Users {
    success: Boolean!
    message: String
    result: Type_Users
}

type Query {
    getUser(filter: Input_Get_User!, projection: JSON, options: JSON, populate: JSON): Type_Response_User!
    getUsers(filter: Input_Get_Users, options: JSON): Type_Response_Users!
}

type Mutation {
    createUser(doc: Input_Create_User!): Type_Response_User!
    updateUser(doc: Input_Update_User!): Type_Response_User!
    deleteUser(filter: Input_Delete_User!): Type_Response_User!
}
